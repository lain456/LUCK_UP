#include "menu.h"
#include <SDL/SDL_image.h>

void initialiserMinimap(minimap *m) {
    m->img_minimap = IMG_Load("minimap_bg.png");
    m->img_joueur = IMG_Load("joueur.png");
    m->pos_minimap.x = 10;
    m->pos_minimap.y = 10;
    m->pos_minimap.w = m->img_minimap->w;
    m->pos_minimap.h = m->img_minimap->h;
    m->pos_joueur.x = 0;
    m->pos_joueur.y = 0;
}

void MAJMinimap(SDL_Rect posJoueur, minimap *m, SDL_Rect camera, int redimensionnement) {
    SDL_Rect posABS;
    posABS.x = posJoueur.x + camera.x;
    posABS.y = posJoueur.y + camera.y;
    m->pos_joueur.x = (posABS.x * redimensionnement) / 100;
    m->pos_joueur.y = (posABS.y * redimensionnement) / 100;
}

void afficherMinimap(minimap m, SDL_Surface *screen) {
    SDL_BlitSurface(m.img_minimap, NULL, screen, &m.pos_minimap);
    SDL_Rect pos_joueur_affiche;
    pos_joueur_affiche.x = m.pos_minimap.x + m.pos_joueur.x;
    pos_joueur_affiche.y = m.pos_minimap.y + m.pos_joueur.y;
    SDL_BlitSurface(m.img_joueur, NULL, screen, &pos_joueur_affiche);
}

void libererMinimap(minimap *m) {
    SDL_FreeSurface(m->img_minimap);
    SDL_FreeSurface(m->img_joueur);
}

int collision_parfaite(SDL_Surface *mask, SDL_Rect joueur, SDL_Rect posMasque) {
    int i, j;
    Uint32 pixel;
    Uint8 r, g, b;
    for (i = 0; i < joueur.w; i++) {
        for (j = 0; j < joueur.h; j++) {
            int x = joueur.x + i - posMasque.x;
            int y = joueur.y + j - posMasque.y;
            if (x >= 0 && x < mask->w && y >= 0 && y < mask->h) {
                pixel = getpixel(mask, x, y);
                SDL_GetRGB(pixel, mask->format, &r, &g, &b);
                if (r > 250 && g > 250 && b > 250) return 1;
            }
        }
    }
    return 0;
}

Uint32 getpixel(SDL_Surface *surface, int x, int y) {
    int bpp = surface->format->BytesPerPixel;
    Uint8 *p = (Uint8 *)surface->pixels + y * surface->pitch + x * bpp;
    switch (bpp) {
        case 1: return *p;
        case 2: return *(Uint16 *)p;
        case 3:
            if (SDL_BYTEORDER == SDL_BIG_ENDIAN)
                return p[0] << 16 | p[1] << 8 | p[2];
            else
                return p[0] | p[1] << 8 | p[2] << 16;
        case 4: return *(Uint32 *)p;
        default: return 0;
    }
}

int collision_BB(SDL_Rect a, SDL_Rect b) {
    return (a.x < b.x + b.w && a.x + a.w > b.x && a.y < b.y + b.h && a.y + a.h > b.y);
}
